#include <iostream>
#include <map>
#include <unordered_map>

// https://t.me/easy_c_plus/225
/*

–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ –±—ã —Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ unordered_map?

 –ß—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ unordered_map, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤. –í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ unordered_map –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–æ:

 ‚ûï –£–¥–æ–±—Å—Ç–≤–æ: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ—à–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Ñ–æ—Ä–º–∞—Ç–µ.

 ü§î –ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è?

 –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ unordered_map, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:

 ‚ûï –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

 ‚ûï –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
 
   */

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
struct Point {
    int x, y;

    // –û–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    bool operator==(const Point& other) const {
        return x == other.x && y == other.y;
    }
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏–∏
struct PointHash {
    std::size_t operator()(const Point& p) const {
        // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏–∏
        return std::hash<int>()(p.x) ^ std::hash<int>()(p.y);
    }
};

int main() {
    // –°–æ–∑–¥–∞–Ω–∏–µ unordered_map —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
    std::unordered_map<Point, std::string, PointHash> umap;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    umap[{1, 2}] = "Point A";
    umap[{3, 4}] = "Point B";

    // –î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
    std::cout << "Point (1, 2): " << umap[{1, 2}] << std::endl;
    std::cout << "Point (3, 4): " << umap[{3, 4}] << std::endl;

    return 0;
}
