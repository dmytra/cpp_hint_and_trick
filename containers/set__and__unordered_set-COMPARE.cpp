#include <iostream>
#include <string>
#include <set>
#include <unordered_set>

// https://t.me/easy_c_plus/379

/*
 ‚ûï –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `std::set`, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –≤–∞–∂–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.

 ‚ûï –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `std::unordered_set`, –∫–æ–≥–¥–∞ –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∏—Å–∫–∞, –≤—Å—Ç–∞–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è.
 
 –í C++ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã std::set –∏ std::unordered_set –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–æ –æ–Ω–∏ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –∏—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤. –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö.

 ü§î `std::set`

 std::set ‚Äî —ç—Ç–æ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –û–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–∞–∫ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (–æ–±—ã—á–Ω–æ –∫—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ), —á—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.

 */

struct MyStruct {
    int id;
    std::string name;
    bool operator==(const MyStruct& other) const {
        return id == other.id && name == other.name;
    }
};

struct MyStructHash {
    std::size_t operator()(const MyStruct& s) const {
        return std::hash<int>()(s.id) ^ std::hash<std::string>()(s.name);
    }
};


int main() {
 
    std::unordered_set<MyStruct, MyStructHash> mySet;
    
    std::set<int> sortedSet = {5, 1, 3, 2, 4};
    for (int n : sortedSet) {
        std::cout << n << " "; // –í—ã–≤–æ–¥: 1 2 3 4 5
    }
    
    auto it = sortedSet.lower_bound(3); // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç >= 3
        
    std::cout << "\n" << *it;
    
    sortedSet.insert(6); // O(log n)
    sortedSet.erase(1);  // O(log n)
    auto found = sortedSet.find(4); // O(log n)
    
    std::unordered_set<int> hashSet = {5, 1, 3, 2, 4};
    for (int n : hashSet) {
        std::cout << n << " "; // –ü–æ—Ä—è–¥–æ–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    }
        
    hashSet.insert(6); // O(1)
    hashSet.erase(1);  // O(1)
    auto found2 = hashSet.find(4); // O(1)
    

    // ===========================
    //https://t.me/easy_c_plus/381
    
    int* ptr = new int(10); // –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
    delete ptr; // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    
    int* arr = new int[10]; // –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –∏–∑ 10 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    delete[] arr; // –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    
        class MyClass {
        public:
            ~MyClass() {
                std::cout << "Destructor called!" << std::endl;
            }
        };

 
    MyClass* obj = new MyClass();
    delete obj; // –í—ã–∑–æ–≤ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
 
        
    int* ptr2 = new int(10);
    delete ptr2;
//    delete ptr2; // –û—à–∏–±–∫–∞: –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    
    int* ptr3;
    //delete ptr3; // –û—à–∏–±–∫–∞: —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è
    

    int* arr3 = new int[10];
    //delete arr3; // –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
    

    
    
    
    return 0;
}


