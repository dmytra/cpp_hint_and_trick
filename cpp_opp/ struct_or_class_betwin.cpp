#include <iostream>


// https://t.me/easy_c_plus/739
// –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É struct –∏ class?

/*
 üü†–î–æ—Å—Ç—É–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 struct: –í—Å–µ —á–ª–µ–Ω—ã (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –º–µ—Ç–æ–¥—ã) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–º–µ—é—Ç –ø—É–±–ª–∏—á–Ω—ã–π (public) –¥–æ—Å—Ç—É–ø.
 class: –í—Å–µ —á–ª–µ–Ω—ã (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –º–µ—Ç–æ–¥—ã) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–º–µ—é—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π (private) –¥–æ—Å—Ç—É–ø.
 
 üü†–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∞
 struct: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Plain Old Data, POD). –í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ struct —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏.
 class: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–≥–∏–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–û–û–ü).
 
 üü†–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
 –í struct –∏ class –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –û–¥–Ω–∞–∫–æ –¥–æ—Å—Ç—É–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ç–æ–∂–µ —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è:
 struct: –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–º.
 class: –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º.
 */



struct MyStruct {
    int x; // –ü—É–±–ª–∏—á–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
};

class MyClass {
    int x; // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
};


struct Point {
    int x;
    int y;

    void move(int dx, int dy) {
        x += dx;
        y += dy;
    }
};



class Circle {
private:
    double radius;

public:
    Circle(double r) : radius(r) {}

    double getArea() const {
        return 3.14159 * radius * radius;
    }

    void setRadius(double r) {
        radius = r;
    }
};

struct BaseStruct {};
struct DerivedStruct : BaseStruct {}; // public –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ

class BaseClass {};
class DerivedClass : BaseClass {}; // private –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ


template <typename T>
struct MyTemplateStruct {
    T value;
};

template <typename T>
class MyTemplateClass {
    T value;
};

int main() {

    Point p = {10, 20};
    p.move(5, 5);
    std::cout << "Point: (" << p.x << ", " << p.y << ")" << std::endl; // –í—ã–≤–æ–¥: Point: (15, 25)

    Circle c(10);
    std::cout << "Area: " << c.getArea() << std::endl; // –í—ã–≤–æ–¥: Area: 314.159
    c.setRadius(5);
    std::cout << "New Area: " << c.getArea() << std::endl; // –í—ã–≤–æ–¥: New Area: 78.53975
    
    /*
     Point: (15, 25)
     Area: 314.159
     New Area: 78.5397
     */
    
    return 0;
}


